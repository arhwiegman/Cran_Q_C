---
title: "_figures"
author: "Adrian Wiegman"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
# SET UP ENVIRONMENT -----------------

# clear objects from environment 
rm(list=ls()) 

# make sure pacman and tidyverse are installed
if (!require("pacman")) install.packages("pacman")
pacman::p_unload("all") # detach all non-base R packages
pacman::p_load(tidyverse) # load tidyverse

# type package names in the string below, use comma as separator
package_names <- "
readxl,
scales,
" 

package_names |>
   str_split_1(",") |> 
   str_extract("\\w+") |>
   (\(x) x[!is.na(x)])() |>
   (\(x) try(pacman::p_load(char=x,character.only=T),F))()
```
# Load & Wrangle Data
```{r}
# |output: false
# working directory
wd = "C:/Users/Adrian.Wiegman/Documents/GitHub/Wiegman_USDA_ARS/Cran_Q_C"
# folder to save output files
outpath = file.path(wd,"3_post/data")
```


```{r}
# read in bog watershed and concentration data outputs from ArcGIS
filename = file.path(wd,"2_gis/bogs_pour_points_ident_agg_raw_MEP_Basins_ZS_extract_Q_C.xls")
df_bogs_raw <- read_excel(filename) %>% 
  mutate(inside_domain = !is.na(Q_m3d_Dinfgwebf))
```


```{r}
# summarise the number of bogs and bog area in model domain
cat("quantiles of bog area outside domain\n")
x <- df_bogs_raw %>% filter(!inside_domain) %>% select(AREA) 
area_out <-x %>% sum()
x %>% summary()
n_out <- x%>% nrow()

cat("quantiles of bog area inside domain\n")
x <- df_bogs_raw %>% filter(inside_domain) %>% select(AREA) 
area_in <-x%>% sum()
x %>% summary()
n_in <-x%>% nrow()

cat("bog area inside domain:", area_in/10000," ha\n")
cat("bog area total:", (area_in+area_out)/10000," ha\n")
cat("percent bog area inside domain:",100 * area_in / (area_in+area_out),"%\n")
cat("bog count inside domain:",n_in,"\n")
cat("bog count total:",(n_in + n_out),"\n")
cat("percent of bog count inside domain:",100 * n_in / (n_in+n_out),"%\n")

cat("bog count total:",(n_in + n_out),"\n")
cat("domain land area:",1728425821/1e6,"km2\n")
cat("domain coastline:",858,"km\n") # calculated from NHD land boundary.
cat("domain area draining to cranberry bogs:",493614300/1e6,"km2\n")
cat("domain area draining to cranberry bogs:",100*493614300/1728425821,"%\n")
```


```{r}
df_bogs <- df_bogs_raw %>% 
  # select bogs inside model domain
  filter(inside_domain==T) %>% 
  rename(# predicted quantiles for stream nitrogen concentrations
         NO3_mgl_p25 = EBK_NO3_p25,
         NO3_mgl_p50 = EBK_NO3_p50,
         NO3_mgl_p75 = EBK_NO3_p75,
         TN_mgl_p25 = EBK_TN_p25,
         TN_mgl_p50 = EBK_TN_p50,
         TN_mgl_p75 = EBK_TN_p75) %>%
  select(OBJECTID,
         bogFID = FID_bogs_raw,
         embFID = FID_MEP_Embayments_Domain,
         #WMA_NO,
         OWNER,
         TOWN,
         BOG_NAME,
         EMBAY_NAME,
         #SUBEM,
         NO3_mgl_p25,
         NO3_mgl_p50,
         NO3_mgl_p75,
         TN_mgl_p25,
         TN_mgl_p50,
         TN_mgl_p75,
         bogsurf_area_m2, # surface area of cranberry bog,
         bogsurf_perim_m2, # surface perimeter ~ ditch area. 
         marg_bogshed_area_m2, # additional area that that bog drains, what seeps through groundwater, not what flows through streams
         embayshed_area_m2, # embayment watershed contributing area from TMDL / MEP / watershed MVP planning tool 
         ZS_MAX_FA_D8_gwe_bf, #number of grid cells draining to cranberry bog
  )
str(df_bogs)

save(df_bogs,file = file.path(outpath,"df_bogs.Rdata"))
```

## Calculate Metrics and perform modeling estimates on selected variables. 

```{r}
load("~/GitHub/Wiegman_USDA_ARS/Cran_Q_C/1_prep/data/fn_pred_RE_pct_from_model_Land_Walton.Rdata")
```

```{r}
load(file.path(outpath,"df_bogs.Rdata"))
recharge_rate_iny = 27.25 #in/yr
recharge_rate_md = recharge_rate_iny*2.54/100/365.25

df_bogs_processed <- df_bogs %>% 
  mutate(NO3_mgl = NO3_mgl_p50,
         TN_mgl = TN_mgl_p50,
         # surface area of cranberry bog
         # area draining to cranberry bog
         # number of grid cells times area of each gridcell 10m x 10m 
         bogshed_area_m2 = ZS_MAX_FA_D8_gwe_bf*10^2, 
         bogshed_area_ha = bogshed_area_m2/10000,
         bogsurf_area_ha = bogsurf_area_m2/10000,
         embayshed_area_ha= embayshed_area_m2/10000,
         marg_bogshed_area_ha= marg_bogshed_area_m2/10000,
         # flow
         Q_m3y = bogshed_area_m2*recharge_rate_md*365.25,
         marg_Q_m3y = marg_bogshed_area_m2*recharge_rate_md*365.25,
         Q_m3d = bogshed_area_m2*recharge_rate_md,
         marg_Q_m3d = marg_bogshed_area_m2*recharge_rate_md) %>% 
  # Calculate concentration and discharge based N loads
  mutate(NO3_Load_kgN_y=Q_m3y*NO3_mgl/1000,
         NO3_Loading_Rate_kgN_ha_y=NO3_Load_kgN_y/bogsurf_area_ha,
         # TN (mg/L) based on regression of TN vs NO3 from MEP reports r2=0.8019
         TN_Load_kgN_y=Q_m3y*TN_mgl/1000,
         TN_Loading_Rate_kgN_ha_y=TN_Load_kgN_y/bogsurf_area_ha,
         HLR_md = Q_m3d/bogsurf_area_m2) %>%
  # Calculate concentration and discharge based N loads
  mutate(marg_NO3_Load_kgN_y=marg_Q_m3y*NO3_mgl/1000,
         marg_NO3_Loading_Rate_kgN_ha_y=marg_NO3_Load_kgN_y/bogsurf_area_ha,
         # TN (mg/L) based on regression of TN vs NO3 from MEP reports r2=0.8019
         marg_TN_Load_kgN_y=marg_Q_m3y*TN_mgl/1000,
         marg_TN_Loading_Rate_kgN_ha_y=marg_TN_Load_kgN_y/bogsurf_area_ha,
         marg_HLR_md = marg_Q_m3d/bogsurf_area_m2) %>%
  # Model Nitrate Reduction Efficiency and Removal
  mutate(
    # This is a exponential model fit to removal efficiency vs. 
    NO3_RE_pct_walton2020_a=-11.37*log(NO3_Loading_Rate_kgN_ha_y)+110.82,
    NO3_RE_pct_walton2020_a=ifelse(NO3_RE_pct_walton2020_a>99,99,NO3_RE_pct_walton2020_a),   
    NO3_RE_pct_walton2020_b=62.158*exp(-(1e-3)*NO3_Loading_Rate_kgN_ha_y),
    NO3_RE_pct_land2016_a=38.884*exp((-3e-4)*NO3_Loading_Rate_kgN_ha_y),
    
    # This is a logarithmic model fit to removal efficiency vs.   
    NO3_removal_kgN_y_walton2020_a=(NO3_RE_pct_walton2020_a/100)*NO3_Load_kgN_y,
    NO3_removal_kgN_y_walton2020_b=(NO3_RE_pct_walton2020_b/100)*NO3_Load_kgN_y,
    NO3_removal_kgN_y_land2016_a=(NO3_RE_pct_land2016_a/100)*NO3_Load_kgN_y)%>%
  
    # Model Marginal Nitrate Reduction Efficiency and Removal
  mutate(
    # This is a exponential model fit to removal efficiency vs. 
    marg_NO3_RE_pct_walton2020_a=-11.37*log(marg_NO3_Loading_Rate_kgN_ha_y)+110.82,
    marg_NO3_RE_pct_walton2020_a=ifelse(marg_NO3_RE_pct_walton2020_a>99,99,NO3_RE_pct_walton2020_a),   
    marg_NO3_RE_pct_walton2020_b=62.158*exp(-(1e-3)*marg_NO3_Loading_Rate_kgN_ha_y),
    marg_NO3_RE_pct_land2016_a=38.884*exp((-3e-4)*marg_NO3_Loading_Rate_kgN_ha_y),
    
    # This is a logarithmic model fit to removal efficiency vs.   
    marg_NO3_removal_kgN_y_walton2020_a=(marg_NO3_RE_pct_walton2020_a/100)*marg_NO3_Load_kgN_y,
    marg_NO3_removal_kgN_y_walton2020_b=(marg_NO3_RE_pct_walton2020_b/100)*marg_NO3_Load_kgN_y,
    marg_NO3_removal_kgN_y_land2016_a=(marg_NO3_RE_pct_land2016_a/100)*marg_NO3_Load_kgN_y)%>%
  
  
  # RESUME HERE @#)@*@$^*$*$*#*#*%()#%**
      # Model Marginal TN  Reduction Efficiency and Removal
  mutate(
    # This is statistical model fit to removal efficiency vs. 
    TN_RE_pct_Land_Walton = fn_pred_RE_pct_from_model_Land_Walton(HLR_md,
                                                                      bogsurf_area_m2,
                                                                      TN_mgl),
    marg_TN_RE_pct_Land_Walton=fn_pred_RE_pct_from_model_Land_Walton(marg_HLR_md,
                                                                      bogsurf_area_m2,
                                                                      TN_mgl),
    # total removal
    TN_removal_kgN_y_Land_Walton = (TN_RE_pct_Land_Walton/100)*marg_TN_Load_kgN_y,
    marg_TN_removal_kgN_y_Land_Walton=(marg_TN_RE_pct_Land_Walton/100)*marg_TN_Load_kgN_y) %>%
  arrange(by=NO3_Load_kgN_y) %>%
  mutate(
    cumsum_TN_Load_kgN_y=cumsum(TN_Load_kgN_y),
    cumsum_NO3_Load_kgN_y=cumsum(NO3_Load_kgN_y)) %>%
  arrange(by=NO3_removal_kgN_y_walton2020_a) %>%
    mutate(
    cumsum_NO3_removal_kgN_y_walton2020_a=cumsum(NO3_removal_kgN_y_walton2020_a),
    cumsum_NO3_removal_kgN_y_walton2020_b=cumsum(NO3_removal_kgN_y_walton2020_b))
  #mutate(across())
save(df_bogs_processed,file=file.path(outpath,"df_bogs_processed.Rdata"))

```

## Embayment Summary

```{r}
df_EMBAY_MVPtool_summary <- read_excel("2_gis/Subembayments_TableToExcel.xlsx") %>% 
  group_by(EMBAY_NAME) %>%
  select(-starts_with("SUB"),-FID,-OBJECTID) %>%
  summarize_if(is.numeric,sum)

df_EMBAY <- read_excel("2_gis/MEP_Embayments_Domain_TableToExcel.xlsx") %>%
  select(embFID=OBJECTID,
         EMBAY_NAME,
         embayshed_area_m2)

df_EMBAY_bog_summary <- df_bogs_processed %>% 
  group_by(embFID,EMBAY_NAME) %>% 
  arrange(marg_TN_Load_kgN_y,descending=T) %>% 
  select(EMBAY_NAME,
         bogsurf_area_ha,
         bogshed_area_ha,
         embayshed_area_ha,
         marg_bogshed_area_ha,
         Q_m3d,
         marg_Q_m3d,
         NO3_mgl,
         TN_mgl,
         TN_Load_kgN_y,
         NO3_Load_kgN_y,
         NO3_removal_kgN_y_walton2020_a,
         NO3_removal_kgN_y_walton2020_b,
         NO3_removal_kgN_y_land2016_a,
         marg_TN_Load_kgN_y,
         marg_NO3_Load_kgN_y,
         TN_removal_kgN_y_Land_Walton,
         marg_TN_removal_kgN_y_Land_Walton,
         marg_NO3_removal_kgN_y_walton2020_a,
         marg_NO3_removal_kgN_y_walton2020_b,
         marg_NO3_removal_kgN_y_land2016_a,) %>%
  summarise_all(~sum(.,na.rm=T)) %>%
  ungroup() 
df_EMBAY_bog_summary %>% write_csv("3_post/df_EMBAY_bog_summary.csv")

df_EMBAY_merged_summary <- df_EMBAY %>% 
  left_join(df_EMBAY_MVPtool_summary) %>%
  left_join(df_EMBAY_bog_summary)

df_EMBAY_merged_summary %>% write_csv("3_post/df_EMBAY_merged_summary.csv")
```


```{r}
df_summary_EMBAY <- df %>% 
  group_by(TOWN) %>% 
  filter(TN_Load_kgN_y == max(TN_Load_kgN_y)) %>%
  arrange(TN_Load_kgN_y,descending=T) %>% 
  left_join(df_DER_names)
df_summary %>% select(TOWN,bogFID,BOG_NAME,DERname,Q_m3d,NO3_mgl,TN_mgl,TN_Load_kgN_y,NO3_removal_kgN_y_walton2020_a,NO3_removal_kgN_y_walton2020_b)
```


# Data Exploration

Set up GGplot

```{r}
require(scales) # to access break formatting functions
xscale =scale_x_continuous(trans=log10_trans(),
                     breaks=trans_breaks("log10", function(x) 10^x),
                     labels=trans_format("log10", math_format(10^.x)))
log10breaks = trans_breaks("log10", function(x) 10^x)
yscale =scale_y_continuous(trans=log10_trans(),
                     breaks=trans_breaks("log10", function(x) 10^x),
                     labels=trans_format("log10", math_format(10^.x)))

df = df_bogs_processed
g <- ggplot(data=df,aes(label=bogFID)) 
```

## Verification

This verifies that the streams data and the watershed MVP tool lines up.  

```{}
g + geom_point(aes(y=TN_Load_kgN_y,x=Nload_Tota_kgN_y,size=Q_m3d,color=NO3_mgl))+
  facet_wrap(~TOWN)+
  xscale+
  yscale+
  #facet_wrap(~EMBAY)+
  #annotation_logticks(sides="b")+
  geom_smooth(aes(y=TN_Load_kgN_y,x=Nload_Tota_kgN_y),method="lm")+
  geom_abline(slope=1,intercept=0)

```


## Univariate

Bogs and bogsheds 
```{r}
summary(df$NO3_mgl)
summary(df$Q_m3d)

# cumulative sum of NO3_removal
ggplot(data=df)+
  stat_ecdf(aes(NO3_removal_kgN_y_walton2020_a),color="blue",geom = "step", pad = FALSE)+
  stat_ecdf(aes(NO3_removal_kgN_y_walton2020_b),color="red",geom = "step", pad = FALSE)+
  stat_ecdf(aes(NO3_removal_kgN_y_land2016_a),color="green",geom = "step", pad = FALSE)

#ggplot(data=df,aes(marg_NO3_removal_kgN_y_walton2020_a))+stat_ecdf(geom = "step", pad = FALSE)
g + geom_point(aes(x=cumsum_TN_Load_kgN_y,y=TN_Load_kgN_y))
g + geom_point(aes(x=cumsum_NO3_Load_kgN_y,y=NO3_Load_kgN_y))
g + geom_point(aes(x=cumsum_NO3_removal_kgN_y_walton2020_a,y=NO3_removal_kgN_y_walton2020_a))+
  geom_text(aes(x=cumsum_NO3_removal_kgN_y_walton2020_a,y=NO3_removal_kgN_y_walton2020_a),check_overlap = TRUE)

# histograms
g + geom_histogram(aes(y=NO3_mgl))
g + geom_histogram(aes(x=Q_m3d))
g + geom_histogram(aes(x=NO3_RE_pct_walton2020_a))
g + geom_histogram(aes(x=NO3_removal_kgN_y_walton2020_a),fill="blue",alpha=0.5)+ geom_histogram(aes(x=NO3_removal_kgN_y_walton2020_b),fill="red",alpha=0.5)+geom_histogram(aes(x=NO3_removal_kgN_y_land2016_a),fill="green",alpha=0.5)+xscale

g + geom_histogram(aes(x=NO3_Load_kgN_y))
g + geom_histogram(aes(x=NO3_Loading_Rate_kgN_ha_y))
g + geom_histogram(aes(x=HLR_md))+
  geom_vline(xintercept = 0.1)+
  xscale+
  annotation_logticks(sides="b")
```

```{r}
qNO3 <- df$NO3_mgl %>% quantile(., probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)
qQ <- df$Q_m3d %>% quantile(., probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)

# histograms
g + geom_vline(aes(xintercept=qNO3['1%']),
             color="black",
             linetype="dashed")+
  geom_vline(aes(xintercept=qNO3['99%']),
             color="black",
             linetype="dashed")+
  geom_vline(aes(xintercept=qNO3['50%']),
             color="black",
             size=1)+
  geom_vline(aes(xintercept=qQ['1%']),color="black",
             linetype="dashed")+
  geom_vline(aes(xintercept=qQ['99%']),color="black",
             linetype="dashed")+
  geom_vline(aes(xintercept=qQ['50%']),
             color="black",
             size=1)+
  geom_histogram(aes(x=Q_m3d),fill="blue",alpha=0.5)+
  geom_histogram(aes(x=NO3_mgl),fill="orange2",alpha=0.5)+
  xscale+
  annotation_logticks(sides="b")+
  labs(caption=paste("C1%:",signif(qNO3['1%'],3),
                     "C50%:",signif(qNO3['50%'],3),
                     "C99%:",signif(qNO3['99%'],3),
                     "\nQ1%:",signif(qQ['1%'],3),
                     "Q50%:",signif(qQ['50%'],3),
                     "Q99%:",signif(qQ['99%'],3)))+
  theme_bw()
ggsave("images/fig_Q_C_hist.png",dpi=600)
```

```{r}
qsurf <- df$bogsurf_area_ha %>% quantile(., probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)
qshed <- df$bogshed_area_ha %>% quantile(., probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)

# histograms
g +
  geom_histogram(aes(x=bogsurf_area_ha),fill="red2",alpha=1)+
  geom_histogram(aes(x=bogshed_area_ha),fill="transparent",alpha=0)+
  geom_vline(aes(xintercept=qsurf['1%']),
             color="red3",
             linetype="dashed")+
  geom_vline(aes(xintercept=qsurf['99%']),
             color="red3",
             linetype="dashed")+
  geom_vline(aes(xintercept=qsurf['50%']),
             color="red3",
             size=1)+
  #geom_vline(aes(xintercept=qshed['1%']),color="cyan2",
  #           linetype="dashed")+
  #geom_vline(aes(xintercept=qshed['99%']),color="cyan2",
  #           linetype="dashed")+
  #geom_vline(aes(xintercept=qshed['50%']),
  #           color="cyan2",
  #           size=1)+
  
  xscale+
  annotation_logticks(sides="b")+
  labs(caption=paste("C1%:",signif(qsurf['1%'],3),
                     "C50%:",signif(qsurf['50%'],3),
                     "C99%:",signif(qsurf['99%'],3),
                     "\nQ1%:",signif(qshed['1%'],3),
                     "Q50%:",signif(qshed['50%'],3),
                     "Q99%:",signif(qshed['99%'],3)))+
  theme_bw()
ggsave("images/fig_surf_hist.png",dpi=600)
```

```{r}
qsurf <- df$bogsurf_area_ha %>% quantile(., probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)
qshed <- df$bogshed_area_ha %>% quantile(., probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)

# histograms
g +
  geom_histogram(aes(x=bogsurf_area_ha),fill="red2",alpha=1)+
  geom_histogram(aes(x=bogshed_area_ha),fill="cyan2",alpha=1)+
  geom_vline(aes(xintercept=qsurf['1%']),
             color="red4",
             linetype="dashed")+
  geom_vline(aes(xintercept=qsurf['99%']),
             color="red4",
             linetype="dashed")+
  geom_vline(aes(xintercept=qsurf['50%']),
             color="red4",
             size=1)+
  geom_vline(aes(xintercept=qshed['1%']),color="cyan4",
             linetype="dashed")+
  geom_vline(aes(xintercept=qshed['99%']),color="cyan4",
             linetype="dashed")+
  geom_vline(aes(xintercept=qshed['50%']),
             color="cyan4",
             size=1)+
  
  xscale+
  annotation_logticks(sides="b")+
  labs(caption=paste("C1%:",signif(qsurf['1%'],3),
                     "C50%:",signif(qsurf['50%'],3),
                     "C99%:",signif(qsurf['99%'],3),
                     "\nQ1%:",signif(qshed['1%'],3),
                     "Q50%:",signif(qshed['50%'],3),
                     "Q99%:",signif(qshed['99%'],3)))+
  theme_bw()
ggsave("images/fig_surf_shed_hist.png",dpi=600)
```

```{r}
qsurf2shed <- quantile(df$bogshed_area_ha/df$bogsurf_area_ha, probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)

# histograms
g +
  geom_histogram(aes(x=bogshed_area_ha/bogsurf_area_ha),fill="green2",alpha=0.5)+
  geom_vline(aes(xintercept=qsurf2shed['1%']),color="green4",
             linetype="dashed")+
  geom_vline(aes(xintercept=qsurf2shed['99%']),color="green4",
             linetype="dashed")+
  geom_vline(aes(xintercept=qsurf2shed['50%']),
             color="green4",
             size=1)+
  xscale+
  annotation_logticks(sides="b")+
  labs(caption=paste("C1%:",signif(qsurf2shed['1%'],3),
                     "C50%:",signif(qsurf2shed['50%'],3),
                     "C99%:",signif(qsurf2shed['99%'],3)))+
  theme_bw()
ggsave("images/fig_surf_2_shed_hist.png",dpi=600)
```

```{r}
q <- quantile(df$NO3_Loading_Rate_kgN_ha_y, probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)

# histograms
g +
  geom_histogram(aes(x=NO3_Loading_Rate_kgN_ha_y),fill="purple",alpha=0.5)+
  geom_vline(aes(xintercept=q['1%']),color="purple4",
             linetype="dashed")+
  geom_vline(aes(xintercept=q['99%']),color="purple4",
             linetype="dashed")+
  geom_vline(aes(xintercept=q['50%']),
             color="purple4",
             size=1)+
  xscale+
  annotation_logticks(sides="b")+
  labs(caption=paste("C1%:",signif(q['1%'],3),
                     "C50%:",signif(q['50%'],3),
                     "C99%:",signif(q['99%'],3)))+
  theme_bw()
ggsave("images/fig_NO3_loading_hist.png",dpi=600)
```

```{r}
q <- quantile(df$HLR_md, probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)

# histograms
g +
  geom_histogram(aes(x=NO3_Loading_Rate_kgN_ha_y),fill="purple",alpha=0.5)+
  geom_vline(aes(xintercept=q['1%']),color="purple4",
             linetype="dashed")+
  geom_vline(aes(xintercept=q['99%']),color="purple4",
             linetype="dashed")+
  geom_vline(aes(xintercept=q['50%']),
             color="purple4",
             size=1)+
  xscale+
  annotation_logticks(sides="b")+
  labs(caption=paste("C1%:",signif(q['1%'],3),
                     "C50%:",signif(q['50%'],3),
                     "C99%:",signif(q['99%'],3)))+
  theme_bw()
ggsave("images/fig_NO3_loading_hist.png",dpi=600)
```

```{r}
q <- quantile(df$NO3_Loading_Rate_kgN_ha_y, probs = c(1,5, 50, 95,99)/100,na.rm=TRUE)

# histograms
g +
  geom_histogram(aes(x=NO3_Loading_Rate_kgN_ha_y),fill="purple",alpha=0.5)+
  geom_vline(aes(xintercept=q['1%']),color="purple4",
             linetype="dashed")+
  geom_vline(aes(xintercept=q['99%']),color="purple4",
             linetype="dashed")+
  geom_vline(aes(xintercept=q['50%']),
             color="purple4",
             size=1)+
  xscale+
  annotation_logticks(sides="b")+
  labs(caption=paste("C1%:",signif(q['1%'],3),
                     "C50%:",signif(q['50%'],3),
                     "C99%:",signif(q['99%'],3)))+
  theme_bw()
ggsave("images/fig_NO3_loading_hist.png",dpi=600)
```

```{r}
g + geom_histogram(aes(x=NO3_RE_pct_walton2020_a))
g + geom_histogram(aes(x=NO3_removal_kgN_y_walton2020_a),fill="blue",alpha=0.5)+ geom_histogram(aes(x=NO3_removal_kgN_y_walton2020_b),fill="red",alpha=0.5)+xscale

g + geom_histogram(aes(x=NO3_Load_kgN_y))
g + geom_histogram(aes(x=NO3_Loading_Rate_kgN_ha_y))
g + geom_histogram(aes(x=HLR_md))+
  geom_vline(xintercept = 0.1)+
  xscale+
  annotation_logticks(sides="b")
```



## Bivariate

```{r}
#g + geom_point(aes(y=marg_NO3_Load_kgN_y,x=NO3_Load_kgN_y))+
#  geom_abline(slope=1,intercept=0)

g + geom_point(aes(y=NO3_mgl,x=HLR_md))+
  xscale +
  geom_vline(xintercept=0.1)+
  annotation_logticks(sides="b")

g + geom_point(aes(y=NO3_mgl,x=HLR_md))+
  xscale +
  geom_vline(xintercept=0.1)+
  annotation_logticks(sides="b")

# plot hlr as a function of 
g + geom_point(aes(y=Q_m3y,x=bogsurf_area_ha,size=NO3_mgl,fill=TOWN),pch=21)+
  xscale +
  yscale +
  geom_line(aes(y=bogsurf_area_ha*0.1,x=bogsurf_area_ha))+
  #geom_line(aes(y=area_bogsurf*0.01,x=area_bogsurf))+
  #geom_line(aes(y=area_bogsurf*0.001,x=area_bogsurf))+
  annotation_logticks(sides="lb")
#HLR = Q/A
#HLR*A = Q
#A = Q/HLR
g + geom_point(aes(y=NO3_Load_kgN_y,
                   x=bogsurf_area_ha,
                   size=NO3_mgl,
                   color=ifelse(HLR_md<0.1,"<0.1",">=0.1")))+
  xscale +
  yscale +
  annotation_logticks(sides="b")
g + geom_point(aes(y=NO3_Load_kgN_y,x=bogsurf_area_ha,color=ifelse(HLR_md<0.1,"<0.1",">=0.1")))+
  xscale +
  yscale +
  annotation_logticks(sides="b")

g + geom_point(aes(y=NO3_Load_kgN_y,x=HLR_md,size=NO3_mgl))+
  xscale +
  yscale +
  geom_vline(xintercept=0.1)+
  annotation_logticks(sides="b")

g + geom_point(aes(y=Q_m3d,x=HLR_md,size=NO3_mgl,color=NO3_mgl))+
  xscale +
  yscale +
  geom_vline(xintercept=0.1)+
  annotation_logticks(sides="b")

g + geom_point(aes(y=NO3_Load_kgN_y,x=HLR_md,size=NO3_mgl,color=NO3_mgl))+
  xscale +
  yscale +
  facet_wrap(~TOWN)+
  geom_vline(xintercept=0.1)+
  annotation_logticks(sides="b")
```

## Selected Bogs

```{r}
restoration_projects = c(`Co-U` = 165, # Coonamessett Upper 
                         `Co-M` = 164, # Coonamessett Upper 
                         `Co-L1` = 583, # Coonamessett Middle
                         `Co-L2` = 584, # Coonamessett Lower 
                         `MM-U1` = 153, # Marstons Mills (Upper)
                         `MM-U2` = 177, # Marstons Mills (Upper)
                         `MM-M` = 155, # Marstons Mills (Main)
                         `MM-L1` = 424, # Marston Mills (Lower)
                         `MM-L2` = 152, # Marston Mills (Lower)
                         `BSB` = 135, # Bank's Street Bog
                         `ChR` = 243, # Childs River,
                         `IBB`=108, # Indian Brook Bogs
                         `TdmE`=496, # Tidmarsh East,
                         `FhP`=715, # Foothills Preserve
                         `HB`=359, # Holmes Bog,
                         `ER-1`=491, # Eel River
                         `ER-2`=492, # Eel River,
                         `PB`=36, # Pinnacle Bog
                         `SM`=419) # South Meadow)
names(restoration_projects)
df_DER_names <- data.frame(DERname = names(restoration_projects),
                           bogFID = restoration_projects)
df_DER <- df_DER_names %>% left_join(df)
write_csv(df_DER,"3_post/df_DER.csv")
```


```{r}
require(ggrepel)
ggplot(data=df %>% na.omit(),aes(Q_m3d,NO3_mgl))+ 
  geom_point(data=df,aes(size=bogsurf_area_m2),pch=21,fill="grey")+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()

ggplot(data=df,aes(HLR_md,NO3_Load_kgN_y))+ 
  geom_point(data=df,aes(size=bogsurf_area_ha,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  theme_bw()

ggplot(data=df,aes(bogsurf_area_ha,NO3_Load_kgN_y))+ 
  geom_point(data=df,aes(size=HLR_md,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()

ggplot(data=df,aes(Q_m3d,NO3_Load_kgN_y))+ 
  geom_point(data=df,aes(size=NO3_mgl,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()

ggplot(data=df,aes(NO3_mgl,NO3_Load_kgN_y))+ 
  geom_point(data=df,aes(size=Q_m3d),fill="grey",pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()

ggplot(data=df,aes(Q_m3d,NO3_Load_kgN_y))+ 
  geom_point(data=df,aes(size=HLR_md,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()

ggplot(data=df,aes(HLR_md,NO3_removal_kgN_y_walton2020_a))+ 
  geom_point(data=df,aes(size=bogsurf_area_ha,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()
ggplot(data=df,aes(NO3_mgl,Q_m3d))+ 
  geom_point(data=df,aes(size=NO3_removal_kgN_y_walton2020_a),fill="grey",pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()
ggplot(data=df,aes(NO3_Loading_Rate_kgN_ha_y,NO3_removal_kgN_y_walton2020_a))+ 
  geom_point(data=df,aes(size=bogsurf_area_ha),pch=21,fill="grey")+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()
ggplot(data=df,aes(NO3_Loading_Rate_kgN_ha_y,NO3_removal_kgN_y_walton2020_b))+ 
  geom_point(data=df,aes(size=bogsurf_area_ha,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()

ggplot(data=df,aes(NO3_Loading_Rate_kgN_ha_y,NO3_removal_kgN_y_walton2020_a))+ 
  geom_point(data=df,aes(size=bogsurf_area_ha,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  xscale+
  yscale+
  #facet_wrap(vars(TOWN))+
  theme_bw()

ggplot(data=df,aes(Q_m3d,NO3_removal_kgN_y_walton2020_a))+ 
  geom_point(data=df,aes(size=bogsurf_area_ha,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  #facet_wrap(vars(TOWN))+
  xscale+
  yscale+
  theme_bw()

ggplot(data=df,aes(Q_m3d,NO3_removal_kgN_y_walton2020_b))+ 
  geom_point(data=df,aes(size=bogsurf_area_ha,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  #facet_wrap(vars(TOWN))+
  xscale+
  yscale+
  theme_bw()

ggplot(data=df,aes(Q_m3d,NO3_removal_kgN_y_walton2020_b))+ 
  geom_point(data=df,aes(size=HLR_md,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  #facet_wrap(vars(TOWN))+
  xscale+
  yscale+
  theme_bw()

ggplot(data=df,aes(Q_m3d,NO3_removal_kgN_y_walton2020_a))+ 
  geom_point(data=df,aes(size=HLR_md,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "yellow", high = "red",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  #facet_wrap(vars(TOWN))+
  xscale+
  yscale+
  theme_bw()

ggplot(data=df,aes(Q_m3d,NO3_removal_kgN_y_walton2020_b))+ 
  geom_point(data=df,aes(size=bogsurf_area_ha,fill=NO3_mgl),pch=21)+
  scale_fill_gradient(low = "white", high = "black",name = "NO3 (mg/L)", trans = log10_trans(),
                        breaks = log10breaks)+
  geom_text_repel(data=df_DER %>% na.omit(),aes(label=DERname),bg.color = "white",
                  bg.r = 0.25,size=3,color="blue",segment.color="blue")+
  #facet_wrap(vars(TOWN))+
  xscale+
  yscale+
 theme_bw()+
  annotation_logticks()
x = "reduction_vs_Q_A_C"
ggsave(paste0("_fig_",x,".png"))

```

# Clustering

```{r}
my_data = df_bogs_processed %>% 
  select(is.numeric) %>%
  select()
  scale %>% na.omit() 
mat <- my_data %>%
  as.matrix.data.frame()
rownames(my_data) = df_bogs_processed$bogFID

library(ComplexHeatmap)
Heatmap(mat)

library("factoextra")
fviz_nbclust(my_data, kmeans, method = "gap_stat")

set.seed(123)
km.res <- kmeans(my_data, 3, nstart = 25)
# Visualize
library("factoextra")
fviz_cluster(km.res, data = my_data,
             ellipse.type = "convex",
             palette = "jco",
             ggtheme = theme_minimal())
```

```{r}
pct_excavated = seq(1,100,by=2)
NO3 = 
M <- matrix(nrow=pct,nrow=50,dimnames = c("pct_excavated","NO3"))
```

