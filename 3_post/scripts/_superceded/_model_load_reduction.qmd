---
title: "_figures"
author: "Adrian Wiegman"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
# SET UP ENVIRONMENT -----------------

# clear objects from environment 
rm(list=ls()) 

# make sure pacman and tidyverse are installed
if (!require("pacman")) install.packages("pacman")
pacman::p_unload("all") # detach all non-base R packages
pacman::p_load(tidyverse) # load tidyverse

# type package names in the string below, use comma as separator
package_names <- "
readxl,
scales,
" 

package_names |>
   str_split_1(",") |> 
   str_extract("\\w+") |>
   (\(x) x[!is.na(x)])() |>
   (\(x) try(pacman::p_load(char=x,character.only=T),F))()
```
# Load & Wrangle Data
```{r}
# |output: false
# working directory
wd = "C:/Users/Adrian.Wiegman/Documents/GitHub/Wiegman_USDA_ARS/Cran_Q_C"
# folder to save output files
outpath = file.path(wd,"3_post/data")
```

Embayment loads from MEP data 

Subembayment Loads from Cape Cod Commission MVP tool. 
https://gis-cccommission.opendata.arcgis.com/datasets/CCCommission::subembayments/explore?location=41.658236%2C-70.483793%2C12.02


```{r}
# Embayment metrics
df_EMBAY_MVPtool_summary <- read_excel("2_gis/Subembayments_TableToExcel.xlsx") %>% 
  group_by(EMBAY_NAME) %>%
  select(-starts_with("SUB"),-FID,-OBJECTID) %>%
  summarize_if(is.numeric,sum)

df_EMBAY <- read_excel("2_gis/MEP_Embayments_Domain_TableToExcel.xlsx") %>%
  select(embFID=OBJECTID,
         EMBAY_NAME,
         # area is in hectars not sq meters
         embayshed_area_ha = embayshed_area_m2)

df_EMBAY_loads <- read_csv("0_raw/embayment_loads.csv",
                           skip=1,na=c("#N/A","#DIV/0!","")) %>%
  select(-embayshed_area_ha,-bog_surface_area_ha)
  
# Show the relationship between CCC loads and MEP loads
lm(atten_kgy~0+CCC_Nload_Total,data=df_EMBAY_loads %>% filter(CCC_Nload_Total!=0 & atten_kgy != 0)) %>% summary()

# Call:
# lm(formula = atten_kgy ~ 0 + CCC_Nload_Total, data = df_EMBAY_loads %>% 
#     filter(CCC_Nload_Total != 0 & atten_kgy != 0))
# 
# Residuals:
#      Min       1Q   Median       3Q      Max 
# -20232.9  -2589.6    426.3   3077.2  11539.4 
# 
# Coefficients:
#                 Estimate Std. Error t value Pr(>|t|)    
# CCC_Nload_Total  0.59327    0.02382    24.9   <2e-16 ***
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# Residual standard error: 6085 on 23 degrees of freedom
# Multiple R-squared:  0.9642,	Adjusted R-squared:  0.9627 
# F-statistic: 620.2 on 1 and 23 DF,  p-value: < 2.2e-16

plot(atten_kgy~0+CCC_Nload_Total,data=df_EMBAY_loads %>% filter(CCC_Nload_Total!=0 & atten_kgy != 0))
abline(0,1)

df_EMBAY_merged <- df_EMBAY %>%
  left_join(df_EMBAY_MVPtool_summary) %>%
  left_join(df_EMBAY_loads) %>%
  # replace missing mep loading rates with CCC rates.
  # apply a 0.6 reduction to CCC loads base on regression above. 
    mutate(atten_kgy = case_when(
      EMBAY_NAME == "ButtermilkBay" ~ CCC_Nload_Total*0.6,
      EMBAY_NAME == "PocassetHarbor" ~ CCC_Nload_Total*0.6,
      T ~ atten_kgy)) %>%
  # calculate loading rates
    mutate(LR_kghay_CCC = CCC_Nload_Total/embayshed_area_ha,
         LR_kghay_MEP = atten_kgy/embayshed_area_ha,
         LR_kghay_MEP_Buildout = atten_plus_buildout_kgy/embayshed_area_ha)
```


```{r}
# read in bog watershed and concentration data outputs from ArcGIS
filename = file.path(wd,"2_gis/bogs_pour_points_ident_agg_raw_MEP_Basins_ZS_extract_Q_C.xls")
df_bogs_raw <- read_excel(filename) %>%
  mutate(inside_domain = !is.na(Q_m3d_D8gwelid0))
```

```{r}
# summarise the number of bogs and bog area in model domain
cat("quantiles of bog area outside domain\n")
x <- df_bogs_raw %>% 
  filter(ORIG_FID>=1) %>%
  filter(!inside_domain) %>% select(sum_bogsurf_area_m2) 
area_out <-x %>% sum()
x %>% summary()
n_out <- x%>% nrow()

cat("quantiles of bog area inside domain\n")
x <- df_bogs_raw %>% filter(inside_domain) %>% select(sum_bogsurf_area_m2) 
area_in <-x%>% sum()
x %>% summary()
n_in <-x%>% nrow()

cat("bog area inside domain:", area_in/10000," ha\n")
cat("bog area total:", (area_in+area_out)/10000," ha\n")
cat("percent bog area inside domain:",100 * area_in / (area_in+area_out),"%\n")
cat("bog count inside domain:",n_in,"\n")
cat("bog count total:",(n_in + n_out),"\n")
cat("percent of bog count inside domain:",100 * n_in / (n_in+n_out),"%\n")

cat("bog count total:",(n_in + n_out),"\n")
cat("domain land area:",1728425821/1e6,"km2\n")
cat("domain coastline:",858,"km\n") # calculated from NHD land boundary.
cat("domain area draining to cranberry bogs:",493614300/1e6,"km2\n")
cat("domain area draining to cranberry bogs:",100*493614300/1728425821,"%\n")
```


```{r}
df_bogs <- df_bogs_raw %>% 
  # select bogs inside model domain
  filter(inside_domain==T) %>% 
  rename(# predicted quantiles for stream nitrogen concentrations
         NO3_mgl_p25 = EBK_NO3_p25,
         NO3_mgl_p50 = EBK_NO3_p50,
         NO3_mgl_p75 = EBK_NO3_p75,
         TN_mgl_p25 = EBK_TN_p25,
         TN_mgl_p50 = EBK_TN_p50,
         TN_mgl_p75 = EBK_TN_p75) %>%
  select(OBJECTID,
         bogFID = ORIG_FID,
         embFID = FID_MEP_Embayments_Domain,
         #WMA_NO,
         OWNER,
         TOWN,
         BOG_NAME,
         EMBAY_NAME,
         #SUBEM,
         NO3_mgl_p25,
         NO3_mgl_p50,
         NO3_mgl_p75,
         TN_mgl_p25,
         TN_mgl_p50,
         TN_mgl_p75,
         bogsurf_area_m2 = sum_bogsurf_area_m2, # surface area of cranberry bog,
         bogsurf_perim_m2 = sum_bogsurf_area_m2, # surface perimeter ~ ditch area. 
         marg_bogshed_area_m2, # additional area that that bog drains, what seeps through groundwater, not what flows through streams
         #embayshed_area_ha = embayshed_area_m2, # embayment watershed contributing area from TMDL / MEP / watershed MVP planning tool 
         ZS_MAX_FA_D8_gwelid0, # new method as of 8/24/24
         ZS_MAX_FA_D8_gweb, # FA = number of grid cells draining to cranberry bog
  )
str(df_bogs)

save(df_bogs,file = file.path(outpath,"df_bogs.Rdata"))
```

## Calculate Metrics and perform modeling estimates on selected variables. 

```{r}
# load functions and set parameters

# loading functions to calculate reduction efficiency
# METHOD 1 RE ~ AREA from CHeng and Basu 2017 dataset
load("~/GitHub/Wiegman_USDA_ARS/Cran_Q_C/3_post/data/fn_pred_RE_pct_from_Cheng.Rdata")

# METHOD 2 RE ~ AREA NLR from Walton 2020 dataset
load("~/GitHub/Wiegman_USDA_ARS/Cran_Q_C/3_post/data/fn_pred_RE_pct_from_Walton.Rdata")

# METHOD 3 RE ~ AREA HLR CONC from land 2016 dataset
load("~/GitHub/Wiegman_USDA_ARS/Cran_Q_C/3_post/data/fn_pred_RE_pct_from_Land.Rdata")

recharge_rate_iny = 27.25 #in/yr
recharge_rate_md = recharge_rate_iny*2.54/100/365.25

```

```{r}
load(file.path(outpath,"df_bogs.Rdata"))

df_bogs_processed <- df_bogs %>%
  mutate(bog_count = 1) %>% 
  mutate(NO3_mgl = NO3_mgl_p50,
         TN_mgl = TN_mgl_p50,
         # surface area of cranberry bog
         # area draining to cranberry bog
         # number of grid cells times area of each gridcell 10m x 10m 
         # bogshed_area_m2 = ZS_MAX_FA_D8_gwe_bf*10^2, 
         bogshed_area_m2 = ZS_MAX_FA_D8_gwelid0*10^2, 
         bogshed_area_ha = bogshed_area_m2/10000,
         bogsurf_area_ha = bogsurf_area_m2/10000,
         #embayshed_area_ha= embayshed_area_m2/10000,
         marg_bogshed_area_ha= marg_bogshed_area_m2/10000,
         # flow
         Q_m3y = bogshed_area_m2*recharge_rate_md*365.25,
         marg_Q_m3y = marg_bogshed_area_m2*recharge_rate_md*365.25,
         Q_m3d = bogshed_area_m2*recharge_rate_md,
         marg_Q_m3d = marg_bogshed_area_m2*recharge_rate_md) %>% 
  
  # Calculate concentration and discharge based N loads
  mutate(NO3_Load_kgN_y=Q_m3y*NO3_mgl/1000,
         NO3_Loading_Rate_kgN_ha_y=NO3_Load_kgN_y/bogsurf_area_ha,
         # TN (mg/L) based on regression of TN vs NO3 from MEP reports r2=0.8019
         TN_Load_kgN_y=Q_m3y*TN_mgl/1000,
         TN_Loading_Rate_kgN_ha_y=TN_Load_kgN_y/bogsurf_area_ha,
         HLR_md = Q_m3d/bogsurf_area_m2) %>%
  
  # Calculate marginal concentration and discharge based N loads
  mutate(marg_NO3_Load_kgN_y=marg_Q_m3y*NO3_mgl/1000,
         marg_NO3_Loading_Rate_kgN_ha_y=marg_NO3_Load_kgN_y/bogsurf_area_ha,
         # TN (mg/L) based on regression of TN vs NO3 from MEP reports r2=0.8019
         marg_TN_Load_kgN_y=marg_Q_m3y*TN_mgl/1000,
         marg_TN_Loading_Rate_kgN_ha_y=marg_TN_Load_kgN_y/bogsurf_area_ha,
         marg_HLR_md = marg_Q_m3d/bogsurf_area_m2) %>%
  
  # Model Nitrate Reduction Efficiency and Removal
  mutate(
    # This is a exponential model fit to removal efficiency vs. 
    NO3_RE_pct_walton2020_a=-11.37*log(NO3_Loading_Rate_kgN_ha_y)+110.82,
    NO3_RE_pct_walton2020_a=ifelse(NO3_RE_pct_walton2020_a>99,99,NO3_RE_pct_walton2020_a),   
    NO3_RE_pct_walton2020_b=62.158*exp(-(1e-3)*NO3_Loading_Rate_kgN_ha_y),
    NO3_RE_pct_land2016_a=38.884*exp((-3e-4)*NO3_Loading_Rate_kgN_ha_y),
    
    # This is a logarithmic model fit to removal efficiency vs.   
    NO3_removal_kgN_y_walton2020_a=(NO3_RE_pct_walton2020_a/100)*NO3_Load_kgN_y,
    NO3_removal_kgN_y_walton2020_b=(NO3_RE_pct_walton2020_b/100)*NO3_Load_kgN_y,
    NO3_removal_kgN_y_land2016_a=(NO3_RE_pct_land2016_a/100)*NO3_Load_kgN_y)%>%
  
    # Model Marginal Nitrate Reduction Efficiency and Removal
  mutate(
    # This is a exponential model fit to removal efficiency vs. 
    marg_NO3_RE_pct_walton2020_a=-11.37*log(marg_NO3_Loading_Rate_kgN_ha_y)+110.82,
    marg_NO3_RE_pct_walton2020_a=ifelse(marg_NO3_RE_pct_walton2020_a>99,99,NO3_RE_pct_walton2020_a),   
    marg_NO3_RE_pct_walton2020_b=62.158*exp(-(1e-3)*marg_NO3_Loading_Rate_kgN_ha_y),
    marg_NO3_RE_pct_land2016_a=38.884*exp((-3e-4)*marg_NO3_Loading_Rate_kgN_ha_y),
    
    # This is a logarithmic model fit to removal efficiency vs.   
    marg_NO3_removal_kgN_y_walton2020_a=(marg_NO3_RE_pct_walton2020_a/100)*marg_NO3_Load_kgN_y,
    marg_NO3_removal_kgN_y_walton2020_b=(marg_NO3_RE_pct_walton2020_b/100)*marg_NO3_Load_kgN_y,
    marg_NO3_removal_kgN_y_land2016_a=(marg_NO3_RE_pct_land2016_a/100)*marg_NO3_Load_kgN_y) %>%
  arrange(by=NO3_Load_kgN_y) %>%
  mutate(
    cumsum_TN_Load_kgN_y=cumsum(TN_Load_kgN_y),
    cumsum_NO3_Load_kgN_y=cumsum(NO3_Load_kgN_y)) %>%
  arrange(by=NO3_removal_kgN_y_walton2020_a) %>%
    mutate(
    cumsum_NO3_removal_kgN_y_walton2020_a=cumsum(NO3_removal_kgN_y_walton2020_a),
    cumsum_NO3_removal_kgN_y_walton2020_b=cumsum(NO3_removal_kgN_y_walton2020_b)) %>%
  
  # adding MEP and CCC loading rate estimates
  left_join(df_EMBAY_merged %>% 
              select(embFID,LR_kghay_CCC,LR_kghay_MEP,LR_kghay_MEP_Buildout)) %>%
  # calculating loads to cranberry bogs
  mutate(TN_Load_kgN_y_CCC = LR_kghay_CCC * bogshed_area_ha,
         TN_Load_kgN_y_MEP = LR_kghay_MEP * bogshed_area_ha,
         TN_load_kgN_y_MEP_Buildout = LR_kghay_MEP_Buildout * bogshed_area_ha,
         marg_TN_Load_kgN_y_CCC = LR_kghay_CCC * marg_bogshed_area_ha,
         marg_TN_Load_kgN_y_MEP = LR_kghay_MEP * marg_bogshed_area_ha,
         marg_TN_load_kgN_y_MEP_Buildout = LR_kghay_MEP_Buildout * marg_bogshed_area_ha) %>%
  
  mutate(marg_TN_Load_kgN_y_CCC = LR_kghay_CCC * marg_bogshed_area_ha,
         marg_TN_Load_kgN_y_MEP = LR_kghay_MEP * marg_bogshed_area_ha,
         marg_TN_load_kgN_y_MEP_Buildout = LR_kghay_MEP_Buildout * marg_bogshed_area_ha) %>%
  
  ##### MODELING TN REMOVAL 
  
  # Model Marginal TN  Reduction Efficiency METHOD 1 AREA CHENG
  mutate(
    # This is statistical model fit to removal efficiency vs.
    TN_RE_pct_1 = fn_pred_RE_pct_from_Cheng(bogsurf_area_m2),
    marg_TN_RE_pct_1 =fn_pred_RE_pct_from_Cheng(bogsurf_area_m2),
    # total removal
    TN_removal_kgN_y_1 = (TN_RE_pct_1/100)*TN_Load_kgN_y,
    marg_TN_removal_kgN_y_1=(marg_TN_RE_pct_1/100)*marg_TN_Load_kgN_y) %>%

  # Model Marginal TN  Reduction Efficiency METHOD 2 AREA NLR WALTON
  mutate(
    # This is statistical model fit to removal efficiency vs. 
    marg_TN_RE_pct_2 =fn_pred_RE_pct_from_Walton(bogsurf_area_m2,
                                                   TN_Loading_Rate_kgN_ha_y),
    TN_RE_pct_2 =fn_pred_RE_pct_from_Walton(bogsurf_area_m2,
                                                   marg_TN_Loading_Rate_kgN_ha_y),
    # total removal
    TN_removal_kgN_y_2 = (TN_RE_pct_2/100)*TN_Load_kgN_y,
    marg_TN_removal_kgN_y_2=(marg_TN_RE_pct_2/100)*marg_TN_Load_kgN_y) %>%
  
  # Model Marginal TN  Reduction Efficiency METHOD 3 AREA HLR NLR LAND
  mutate(
    # This is statistical model fit to removal efficiency vs. 
    TN_RE_pct_3 =fn_pred_RE_pct_from_Land(bogsurf_area_m2,
                                          HLR_md,
                                          TN_Loading_Rate_kgN_ha_y),
    marg_TN_RE_pct_3 = fn_pred_RE_pct_from_Land(bogsurf_area_m2,
                                          marg_HLR_md,
                                          marg_TN_Loading_Rate_kgN_ha_y), 
    # total removal
    TN_removal_kgN_y_3 = (TN_RE_pct_3/100)*TN_Load_kgN_y,
    marg_TN_removal_kgN_y_3=(marg_TN_RE_pct_3/100)*marg_TN_Load_kgN_y) %>%
  mutate(
  
    # This is statistical model fit to removal efficiency vs. area
    TN_RE_pct_1_MEP = fn_pred_RE_pct_from_Cheng(bogsurf_area_m2),
    marg_TN_RE_pct_1_MEP = fn_pred_RE_pct_from_Cheng(bogsurf_area_m2),
    # total removal
    TN_removal_kgN_y_1_MEP = (TN_RE_pct_1/100)*TN_Load_kgN_y_MEP,
    marg_TN_removal_kgN_y_1_MEP=(marg_TN_RE_pct_1/100)*marg_TN_Load_kgN_y_MEP) %>%

  # Model Marginal TN  Reduction Efficiency METHOD 2 AREA NLR
  mutate(
    # This is statistical model fit to removal efficiency vs. 
    marg_TN_RE_pct_2_MEP = fn_pred_RE_pct_from_Walton(bogsurf_area_m2,
                                                      marg_TN_Load_kgN_y_MEP/bogsurf_area_ha),
    TN_RE_pct_2_MEP = fn_pred_RE_pct_from_Walton(bogsurf_area_m2,
                                                TN_Load_kgN_y_MEP/bogsurf_area_ha),
    # total removal
    TN_removal_kgN_y_2_MEP = (TN_RE_pct_2_MEP/100)*marg_TN_Load_kgN_y_MEP,
    marg_TN_removal_kgN_y_2_MEP =(marg_TN_RE_pct_2_MEP/100)*marg_TN_Load_kgN_y_MEP) %>%
   
  # Model Marginal TN  Reduction Efficiency METHOD 3 AREA HLR NLR LAND
  mutate(
    # This is statistical model fit to removal efficiency vs. 
    marg_TN_RE_pct_3_MEP = fn_pred_RE_pct_from_Land(bogsurf_area_m2,
                                                    marg_HLR_md,
                                                    marg_TN_Load_kgN_y_MEP/bogsurf_area_ha),
    TN_RE_pct_3_MEP =fn_pred_RE_pct_from_Land(bogsurf_area_m2,
                                              HLR_md,
                                              TN_Load_kgN_y_MEP/bogsurf_area_ha),
    # total removal
    TN_removal_kgN_y_3_MEP = (TN_RE_pct_3_MEP/100)*marg_TN_Load_kgN_y_MEP,
    marg_TN_removal_kgN_y_3_MEP =(marg_TN_RE_pct_3_MEP/100)*marg_TN_Load_kgN_y_MEP)
  #mutate(across())
save(df_bogs_processed,file=file.path(outpath,"df_bogs_processed.Rdata"))
```


# set df bogs processed as the working dataframe 
```{r}
df = df_bogs_processed
```

## Embayment Summary

```{r}
df_EMBAY_sums <- df_bogs_processed %>% 
  group_by(embFID,EMBAY_NAME) %>% 
  arrange(marg_TN_Load_kgN_y,descending=T) %>% 
  select(EMBAY_NAME,
         bogsurf_area_ha,
         bogshed_area_ha,
         bog_count,
         marg_bogshed_area_ha,
         Q_m3d,
         marg_Q_m3d,
         TN_mgl_p25,
         TN_mgl_p50,
         TN_mgl_p75,
         NO3_mgl_p25,
         NO3_mgl_p50,
         NO3_mgl_p75,
         TN_Load_kgN_y,
         NO3_Load_kgN_y,
         NO3_removal_kgN_y_walton2020_a,
         NO3_removal_kgN_y_walton2020_b,
         NO3_removal_kgN_y_land2016_a,
         marg_TN_Load_kgN_y,
         marg_NO3_Load_kgN_y,
         marg_NO3_removal_kgN_y_walton2020_a,
         marg_NO3_removal_kgN_y_walton2020_b,
         marg_NO3_removal_kgN_y_land2016_a,
         marg_TN_removal_kgN_y_1,
         marg_TN_removal_kgN_y_2,
         marg_TN_removal_kgN_y_3,
         marg_TN_removal_kgN_y_1_MEP,
         marg_TN_removal_kgN_y_2_MEP,
         marg_TN_removal_kgN_y_3_MEP,
         TN_removal_kgN_y_1,
         TN_removal_kgN_y_2,
         TN_removal_kgN_y_3,
         TN_removal_kgN_y_1_MEP,
         TN_removal_kgN_y_2_MEP,
         TN_removal_kgN_y_3_MEP,
         marg_TN_Load_kgN_y_MEP,
         TN_Load_kgN_y_MEP) %>%
  summarise_all(~sum(.,na.rm=T)) %>%
  ungroup() %>%
  # convert concentration sums to means
  mutate(TN_mgl_p25=TN_mgl_p25/bog_count,
         TN_mgl_p50=TN_mgl_p50/bog_count,
         TN_mgl_p75=TN_mgl_p75/bog_count,
         NO3_mgl_p25=NO3_mgl_p25/bog_count,
         NO3_mgl_p50=NO3_mgl_p50/bog_count,
         NO3_mgl_p75=NO3_mgl_p75/bog_count)
df_EMBAY_sums %>% write_csv("3_post/df_EMBAY_sums.csv")


df_EMBAY_merged_summary <- df_EMBAY_merged %>%
  left_join(df_EMBAY_sums)

df_EMBAY_merged_summary %>% write_csv("3_post/df_EMBAY_merged_summary.csv")
```

## Highlight Selected Bogs

```{r}
restoration_projects = c(`Co-U` = 165, # Coonamessett Upper 
                         `Co-M` = 164, # Coonamessett Upper 
                         `Co-L1` = 583, # Coonamessett Middle
                         `Co-L2` = 584, # Coonamessett Lower 
                         `MM-U1` = 153, # Marstons Mills (Upper)
                         `MM-U2` = 177, # Marstons Mills (Upper)
                         `MM-M` = 155, # Marstons Mills (Main)
                         `MM-L1` = 424, # Marston Mills (Lower)
                         `MM-L2` = 152, # Marston Mills (Lower)
                         `BSB` = 135, # Bank's Street Bog
                         `ChR` = 243, # Childs River,
                         `IBB`=108, # Indian Brook Bogs
                         `TdmE`=496, # Tidmarsh East,
                         `FhP`=715, # Foothills Preserve
                         `HB`=359, # Holmes Bog,
                         `ER-1`=491, # Eel River
                         `ER-2`=492, # Eel River,
                         `PB`=36, # Pinnacle Bog
                         `SM`=419) # South Meadow)
# sometimes index starts at zero sometime starts at 1. adjust if figures get messed up.
restoration_projects = restoration_projects + 1
names(restoration_projects)
df_DER_names <- data.frame(DERname = names(restoration_projects),
                           bogFID = restoration_projects)
df_DER <- df_DER_names %>% left_join(df)
write_csv(df_DER,"3_post/df_DER.csv")
```

# The bog receiving the highest load within each embayment. 

```{r}
df_EMBAY_bog_summary <- df_bogs_processed %>% 
  left_join(df_DER_names) %>%
  mutate(TN_removal_kgN_y_avg = rowMeans(across(contains("removal")&!contains("marg")))) %>%
  mutate(marg_TN_removal_kgN_y_avg = rowMeans(across(contains("removal")&contains("marg")))) %>%
  group_by(EMBAY_NAME,embFID) %>% 
  filter(TN_removal_kgN_y_avg == quantile(TN_removal_kgN_y_avg,1,na.rm=T)) %>%
  arrange(TN_Load_kgN_y,descending=T) %>% 
  left_join(df_DER_names) %>% 
  left_join(df_EMBAY) %>%
  left_join(df_EMBAY_MVPtool_summary)
df_EMBAY_bog_summary %>% 
    select(EMBAY_NAME,
           embFID,
         bogsurf_area_ha,
         bogshed_area_ha,
         embayshed_area_ha,
         marg_bogshed_area_ha,
         Q_m3d,
         marg_Q_m3d,
         NO3_mgl,
         TN_mgl,
         TN_Load_kgN_y,
         NO3_Load_kgN_y,
         NO3_removal_kgN_y_walton2020_a,
         NO3_removal_kgN_y_walton2020_b,
         NO3_removal_kgN_y_land2016_a,
         marg_TN_Load_kgN_y,
         marg_NO3_Load_kgN_y,
         marg_NO3_removal_kgN_y_walton2020_a,
         marg_NO3_removal_kgN_y_walton2020_b,
         marg_NO3_removal_kgN_y_land2016_a,
         marg_TN_removal_kgN_y_1,
         marg_TN_removal_kgN_y_2,
         marg_TN_removal_kgN_y_3,
         marg_TN_removal_kgN_y_1_MEP,
         marg_TN_removal_kgN_y_2_MEP,
         marg_TN_removal_kgN_y_3_MEP,
         TN_removal_kgN_y_1,
         TN_removal_kgN_y_2,
         TN_removal_kgN_y_3,
         TN_removal_kgN_y_1_MEP,
         TN_removal_kgN_y_2_MEP,
         TN_removal_kgN_y_3_MEP,
         marg_TN_Load_kgN_y_MEP,
         TN_Load_kgN_y_MEP) %>%
  write_csv("3_post/df_EMBAY_bog_summary_highest_load.csv")
```

```{r}
save.image(file="3_post/data/_model_load_reduction.Rdata")
```
