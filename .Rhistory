#embayshed_area_ha = embayshed_area_m2, # embayment watershed contributing area from TMDL / MEP / watershed MVP planning tool
ZS_MAX_FA_D8_gwelid0, # zonal statistics extract of the cel with maximum flow accumulation within a given cranberry bog, using the `gwelid0` hybrid water table elevation model
)
str(df_bogs)
save(df_bogs,file = file.path(outpath,"df_bogs.Rdata"))
# Chunk 7
# set parameters
recharge_rate_iny = 27.25 #in/yr
recharge_rate_md = recharge_rate_iny*2.54/100/365.25 # recharge rate in m/d
# Chunk 8
# perform calculations
load(file.path(outpath,"df_bogs.Rdata"))
df_bogs_processed <- df_bogs %>%
mutate(bog_count = 1) %>%
mutate(
# use 50% percentile estimate of concentrations for load calculations.
NO3_mgl = NO3_mgl_p50,
TN_mgl = TN_mgl_p50,
# surface area of cranberry bog
# area draining to cranberry bog
# number of grid cells times area of each gridcell 10m x 10m
# bogshed_area_m2 = ZS_MAX_FA_D8_gwe_bf*10^2,
bogshed_area_m2 = ZS_MAX_FA_D8_gwelid0*10^2, # m, total area draining through cranberry bog
bogshed_area_ha = bogshed_area_m2/10000, # hectares, total area draining through cranberry bog
bogsurf_area_ha = bogsurf_area_m2/10000, # hectares, surface area of cranberry farm polygon
#embayshed_area_ha= embayshed_area_m2/10000,
marg_bogshed_area_ha= marg_bogshed_area_m2/10000,
# flow
Q_m3y = bogshed_area_m2*recharge_rate_md*365.25,
marg_Q_m3y = marg_bogshed_area_m2*recharge_rate_md*365.25,
Q_m3d = bogshed_area_m2*recharge_rate_md,
marg_Q_m3d = marg_bogshed_area_m2*recharge_rate_md) %>%
# Calculate concentration and discharge based N loads  (Q*C, L1, Eqn. 1)
mutate(NO3_Load_kgN_y=Q_m3y*NO3_mgl/1000,
NO3_Loading_Rate_kgN_ha_y=NO3_Load_kgN_y/bogsurf_area_ha,
# TN (mg/L) based on regression of TN vs NO3 from MEP reports r2=0.8019
TN_Load_kgN_y=Q_m3y*TN_mgl/1000,
TN_Loading_Rate_kgN_ha_y=TN_Load_kgN_y/bogsurf_area_ha,
HLR_md = Q_m3d/bogsurf_area_m2) %>%
# Calculate marginal concentration and discharge based N loads (MEP, L2, Eqn. 2)
mutate(marg_NO3_Load_kgN_y=marg_Q_m3y*NO3_mgl/1000,
marg_NO3_Loading_Rate_kgN_ha_y=marg_NO3_Load_kgN_y/bogsurf_area_ha,
# TN (mg/L) based on regression of TN vs NO3 from MEP reports r2=0.8019
marg_TN_Load_kgN_y=marg_Q_m3y*TN_mgl/1000,
marg_TN_Loading_Rate_kgN_ha_y=marg_TN_Load_kgN_y/bogsurf_area_ha,
marg_HLR_md = marg_Q_m3d/bogsurf_area_m2) %>%
# adding MEP and CCC loading rate estimates
left_join(df_EMBAY_merged %>%
select(embFID,LR_kghay_CCC,LR_kghay_MEP,LR_kghay_MEP_Buildout)) %>%
# Calculate loading rate * contributing area based loads (MEP, L2)
# note CCC and MEP Build out estimates not reported in paper.
# Total watershed loads transmitted to cranberry farm
mutate(TN_Load_kgN_y_CCC = LR_kghay_CCC * bogshed_area_ha,
TN_Load_kgN_y_MEP = LR_kghay_MEP * bogshed_area_ha,
TN_load_kgN_y_MEP_Buildout = LR_kghay_MEP_Buildout * bogshed_area_ha) %>%
# marginal (Reach) watershed loads accumulated
# between upstream and downstream ends of cranberry farm
mutate(marg_TN_Load_kgN_y_CCC = LR_kghay_CCC * marg_bogshed_area_ha,
marg_TN_Load_kgN_y_MEP = LR_kghay_MEP * marg_bogshed_area_ha,
marg_TN_load_kgN_y_MEP_Buildout = LR_kghay_MEP_Buildout * marg_bogshed_area_ha)
save(df_bogs_processed,file=file.path(outpath,"df_bogs_processed.Rdata"))
# Chunk 9
# set df bogs processed as the working dataframe
df = df_bogs_processed
# Chunk 10
df_EMBAY_sums <- df_bogs_processed %>%
group_by(embFID,EMBAY_NAME) %>%
arrange(marg_TN_Load_kgN_y,descending=T) %>%
select(embFID,
EMBAY_NAME,
bogsurf_area_ha, # hectares, cranberry farm surface area
bogshed_area_ha, # hectares, area draining through craberry farms
bog_count, # count of cranberry farms
marg_bogshed_area_ha, # hectares, marginal (reach) contributing area of cranberry farm
Q_m3d, # m^3 d-1, estimated flow based on water table contributing area and recharge rate.
marg_Q_m3d, # m^3 d-1, marginal (reach) flow accumulated between upstream and downstream end of cranberry farm
TN_mgl_p25, # mg N L-1, TN 25% percentile of EBK (krigging model) estimated TN concentration
TN_mgl_p50, # mg N L-1, TN 50% percentile of EBK (krigging model) estimated TN concentration
TN_mgl_p75, # mg N L-1, TN 75% percentile of EBK (krigging model) estimated TN concentration
NO3_mgl_p25, # mg N L-1, TN 25% percentile of EBK (krigging model) estimated NO3 (nitrate+nitrite) concentration
NO3_mgl_p50, # mg N L-1, TN 50% percentile of EBK (krigging model) estimated NO3 (nitrate+nitrite) concentration
NO3_mgl_p75, # mg N L-1, TN 75% percentile of EBK (krigging model) estimated NO3 (nitrate+nitrite) concentration
TN_Load_kgN_y, # kg N y-1, modeled total watershed TN load transported to cranberry bogs, based on Q*C method using 50% percentile estimate of EBK predicted concentration (eqn 1, L1)
NO3_Load_kgN_y, # kg N y-1, modeled total watershed NO3 load transported to cranberry bogs, based on Q*C method using 50% percentile estimate of EBK predicted concentration (eqn 1, L1)
marg_TN_Load_kgN_y, # kg N y-1, modeled marginal watershed TN load accumulated between upstream and downstream end of cranberry bog, based on Q*C method using 50% percentile estimate of EBK predicted concentration (eqn 1, L1)
marg_NO3_Load_kgN_y, # kg N y-1, modeled marginal watershed NO3 load accumulated between upstream and downstream end of cranberry bog, based on Q*C method using 50% percentile estimate of EBK predicted concentration (eqn 1, L1)
marg_TN_Load_kgN_y_MEP, # kg N y-1, modeled marginal watershed TN load accumulated between upstream and downstream end of cranberry bog, MEP estimated loading rate and marginal contributing area.
TN_Load_kgN_y_MEP, # kg N y-1, modeled total watershed TN load accumulated between upstream and downstream end of cranberry bog, MEP estimated loading rate and marginal contributing area
) %>%
summarise_all(~sum(.,na.rm=T)) %>%
ungroup() %>%
# convert concentration sums to means
mutate(TN_mgl_p25=TN_mgl_p25/bog_count,
TN_mgl_p50=TN_mgl_p50/bog_count,
TN_mgl_p75=TN_mgl_p75/bog_count,
NO3_mgl_p25=NO3_mgl_p25/bog_count,
NO3_mgl_p50=NO3_mgl_p50/bog_count,
NO3_mgl_p75=NO3_mgl_p75/bog_count)
df_EMBAY_sums %>% write_csv("3_post/df_EMBAY_sums.csv")
# add embayment attributes
df_EMBAY_merged_summary <- df_EMBAY_merged %>%
left_join(df_EMBAY_sums,by=c("embFID","EMBAY_NAME"))
# save embayment attributes with modeled totals for nitrogen loads delivered to cranberry bogs.
df_EMBAY_merged_summary %>% write_csv("3_post/df_EMBAY_merged_summary.csv")
# Chunk 11
restoration_projects = c(`Co-U` = 165, # Coonamessett Upper
`Co-M` = 164, # Coonamessett Upper
`Co-L1` = 583, # Coonamessett Middle
`Co-L2` = 584, # Coonamessett Lower
`MM-U1` = 153, # Marstons Mills (Upper)
`MM-U2` = 177, # Marstons Mills (Upper)
`MM-M` = 155, # Marstons Mills (Main)
`MM-L1` = 424, # Marston Mills (Lower)
`MM-L2` = 152, # Marston Mills (Lower)
`BSB` = 135, # Bank's Street Bog
`ChR` = 243, # Childs River,
`IBB`=108, # Indian Brook Bogs
`TdmE`=496, # Tidmarsh East,
`FhP`=715, # Foothills Preserve
`HB`=359, # Holmes Bog,
`ER-1`=491, # Eel River
`ER-2`=492, # Eel River,
`PB`=36, # Pinnacle Bog
`SM`=419) # South Meadow)
# sometimes index starts at zero sometime starts at 1. adjust if figures get messed up.
restoration_projects = restoration_projects + 1
names(restoration_projects)
df_DER_names <- data.frame(DERname = names(restoration_projects),
bogFID = restoration_projects)
df_DER <- df_DER_names %>% left_join(df)
write_csv(df_DER,"3_post/df_DER.csv")
# Chunk 12
df_EMBAY_bog_summary <- df_bogs_processed %>%
left_join(df_DER_names) %>%
group_by(EMBAY_NAME,embFID) %>%
arrange(TN_Load_kgN_y,descending=T) %>%
filter(TN_Load_kgN_y == max(TN_Load_kgN_y)) %>%
left_join(df_DER_names) %>%
left_join(df_EMBAY) %>%
left_join(df_EMBAY_MVPtool_summary)
df_EMBAY_bog_summary %>%
select(EMBAY_NAME,
embFID,
bogsurf_area_ha,
bogshed_area_ha,
embayshed_area_ha,
marg_bogshed_area_ha,
Q_m3d,
marg_Q_m3d, # discharge accumulated between upstream and downstream,
NO3_mgl, # 50% concentration estimate
TN_mgl, # 50% concentration estimate
TN_mgl_p25, # mg N L-1, TN 25% percentile of EBK (krigging model) estimated TN concentration
TN_mgl_p50, # mg N L-1, TN 50% percentile of EBK (krigging model) estimated TN concentration
TN_mgl_p75, # mg N L-1, TN 75% percentile of EBK (krigging model) estimated TN concentration
NO3_mgl_p25, # mg N L-1, TN 25% percentile of EBK (krigging model) estimated NO3 (nitrate+nitrite) concentration
NO3_mgl_p50, # mg N L-1, TN 50% percentile of EBK (krigging model) estimated NO3 (nitrate+nitrite) concentration
NO3_mgl_p75, # mg N L-1, TN 75% percentile of EBK (krigging model) estimated NO3 (nitrate+nitrite) concentration
TN_Load_kgN_y,
NO3_Load_kgN_y,
marg_TN_Load_kgN_y,
marg_NO3_Load_kgN_y,
marg_TN_Load_kgN_y_MEP,
TN_Load_kgN_y_MEP) %>%
write_csv("3_post/df_EMBAY_bog_summary_highest_load.csv")
# Chunk 13
save.image(file="3_post/data/1_model_loads.Rdata")
# Chunk 1
# SET UP ENVIRONMENT -----------------
# clear objects from environment
rm(list=ls())
# make sure pacman and tidyverse are installed
if (!require("pacman")) install.packages("pacman")
pacman::p_unload("all") # detach all non-base R packages
pacman::p_load(tidyverse) # load tidyverse
# type package names in the string below, use comma as separator
package_names <- "
readxl,
scales,
broom,
ggpubr,
ggrepel,
RColorBrewer
"
package_names |>
str_split_1(",") |>
str_extract("\\w+") |>
(\(x) x[!is.na(x)])() |>
(\(x) try(pacman::p_load(char=x,character.only=T),F))()
# Chunk 2
theme_set(theme_bw())
theme_update(panel.grid.minor=element_blank(),
axis.text.x = element_text(color = "black",size=12),
axis.text.y = element_text(color = "black",size=12))
log_x_scale <- scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
log_y_scale <- scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
# Chunk 3
load("3_post/data/1_model_loads.Rdata")
# Chunk 4
load("3_post/data/_verify_discharge.Rdata")
source("~/GitHub/Cran_Q_C/3_post/scripts/_verify_discharge.R", echo=TRUE)
# Chunk 1
# SET UP ENVIRONMENT -----------------
# clear objects from environment
rm(list=ls())
# make sure pacman and tidyverse are installed
if (!require("pacman")) install.packages("pacman")
pacman::p_unload("all") # detach all non-base R packages
pacman::p_load(tidyverse) # load tidyverse
# type package names in the string below, use comma as separator
package_names <- "
readxl,
scales,
broom,
ggpubr,
ggrepel,
RColorBrewer
"
package_names |>
str_split_1(",") |>
str_extract("\\w+") |>
(\(x) x[!is.na(x)])() |>
(\(x) try(pacman::p_load(char=x,character.only=T),F))()
# Chunk 2
theme_set(theme_bw())
theme_update(panel.grid.minor=element_blank(),
axis.text.x = element_text(color = "black",size=12),
axis.text.y = element_text(color = "black",size=12))
log_x_scale <- scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
log_y_scale <- scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
# Chunk 3
load("3_post/data/1_model_loads.Rdata")
# Chunk 4
load("3_post/data/_verify_discharge.Rdata")
# FIGURE 2 -----------
df <- df_Q_bogs_streams_verify
myshapes = scale_shape_manual(values=c(21,22,24))
myfills = scale_fill_manual(values=c("grey90","yellow","blue2"))
g2 <- ggplot(df) +
geom_abline(intercept=0,slope=1)+
geom_point(aes(y=Q_m3d,x=Q_m3d_D8gwelid0,
fill=org,
shape=org),
alpha=0.75,size=2.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="white",
alpha=0.75,pch=16,size=1.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="red",
alpha=0.75,pch=20,size=1)+
myshapes+
myfills
g2 +
xlim(c(0,12000))+
ylim(c(0,12000))+
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank())
ggsave("images/fig2_verify_Q_gwelid0_inset.png",width=4*.5,height=4*.5,dpi=600)
g2 +
xlim(c(0,120000))+
ylim(c(0,120000))+
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank())
ggsave("images/fig2_verify_Q_gwelid0.png",width=4,height=4,dpi=600)
lm(resid~Q_m3d_D8gwelid0,data=df%>% filter(cranberry)) %>% summary
lm(resid~Q_m3d_D8gwelid0,data=df%>% filter(org=="USGS"))%>% summary
lm(resid~Q_m3d_D8gwelid0,data=df) %>% summary
lm(Q_m3d~Q_m3d_D8gwelid0,data=df %>% filter(cranberry)) %>% summary
lm(Q_m3d~Q_m3d_D8gwelid0,data=df %>% filter(org=="USGS"))%>% summary
lm(Q_m3d~Q_m3d_D8gwelid0,data=df) %>% summary
df$resid^2%>%mean() %>% sqrt()
# Chunk 5
source("3_post/scripts/_spearman_TN_NO3_pop_imp.R")
# Chunk 1
# SET UP ENVIRONMENT -----------------
# clear objects from environment
rm(list=ls())
# make sure pacman and tidyverse are installed
if (!require("pacman")) install.packages("pacman")
pacman::p_unload("all") # detach all non-base R packages
pacman::p_load(tidyverse) # load tidyverse
# type package names in the string below, use comma as separator
package_names <- "
readxl,
scales,
broom,
ggpubr,
ggrepel,
RColorBrewer
"
package_names |>
str_split_1(",") |>
str_extract("\\w+") |>
(\(x) x[!is.na(x)])() |>
(\(x) try(pacman::p_load(char=x,character.only=T),F))()
# Chunk 2
theme_set(theme_bw())
theme_update(panel.grid.minor=element_blank(),
axis.text.x = element_text(color = "black",size=12),
axis.text.y = element_text(color = "black",size=12))
log_x_scale <- scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
log_y_scale <- scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
# Chunk 3
load("3_post/data/1_model_loads.Rdata")
# Chunk 4
load("3_post/data/_verify_discharge.Rdata")
# FIGURE 2 -----------
df <- df_Q_bogs_streams_verify
myshapes = scale_shape_manual(values=c(21,22,24))
myfills = scale_fill_manual(values=c("grey90","yellow","blue2"))
g2 <- ggplot(df) +
geom_abline(intercept=0,slope=1)+
geom_point(aes(y=Q_m3d,x=Q_m3d_D8gwelid0,
fill=org,
shape=org),
alpha=0.75,size=2.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="white",
alpha=0.75,pch=16,size=1.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="red",
alpha=0.75,pch=20,size=1)+
myshapes+
myfills
g2 +
xlim(c(0,12000))+
ylim(c(0,12000))+
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank())
# Chunk 1
# SET UP ENVIRONMENT -----------------
# clear objects from environment
rm(list=ls())
# make sure pacman and tidyverse are installed
if (!require("pacman")) install.packages("pacman")
pacman::p_unload("all") # detach all non-base R packages
pacman::p_load(tidyverse) # load tidyverse
# type package names in the string below, use comma as separator
package_names <- "
readxl,
scales,
broom,
ggpubr,
ggrepel,
RColorBrewer
"
package_names |>
str_split_1(",") |>
str_extract("\\w+") |>
(\(x) x[!is.na(x)])() |>
(\(x) try(pacman::p_load(char=x,character.only=T),F))()
# Chunk 2
theme_set(theme_bw())
theme_update(panel.grid.minor=element_blank(),
axis.text.x = element_text(color = "black",size=12),
axis.text.y = element_text(color = "black",size=12))
log_x_scale <- scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
log_y_scale <- scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
# Chunk 3
load("3_post/data/1_model_loads.Rdata")
# Chunk 4
load("3_post/data/_verify_discharge.Rdata")
# FIGURE 2 -----------
df <- df_Q_bogs_streams_verify
myshapes = scale_shape_manual(values=c(21,22,24))
myfills = scale_fill_manual(values=c("grey90","yellow","blue2"))
g2 <- ggplot(df) +
geom_abline(intercept=0,slope=1)+
geom_point(aes(y=Q_m3d,x=Q_m3d_D8gwelid0,
fill=org,
shape=org),
alpha=0.75,size=2.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="white",
alpha=0.75,pch=16,size=1.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="red",
alpha=0.75,pch=20,size=1)+
myshapes+
myfills
g2 +
xlim(c(0,12000))+
ylim(c(0,12000))+
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank())
load("3_post/data/_verify_discharge.Rdata")
# FIGURE 2 -----------
df <- df_Q_bogs_streams_verify
myshapes = scale_shape_manual(values=c(21,22,24))
myfills = scale_fill_manual(values=c("grey90","yellow","blue2"))
g2 <- ggplot(df) +
geom_abline(intercept=0,slope=1)+
geom_point(aes(y=Q_m3d,x=Q_m3d_D8gwelid0,
fill=org,
shape=org),
alpha=0.75,size=2.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="white",
alpha=0.75,pch=16,size=1.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="red",
alpha=0.75,pch=20,size=1)+
myshapes+
myfills
g2 +
xlim(c(0,12000))+
ylim(c(0,12000))+
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank())
g2 +
xlim(c(0,12000))+
ylim(c(0,12000))+
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank())
g2 <- ggplot(df) +
geom_abline(intercept=0,slope=1)+
geom_point(aes(y=Q_m3d,x=Q_m3d_D8gwelid0,
fill=org,
shape=org),
alpha=0.75,size=2.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="white",
alpha=0.75,pch=16,size=1.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="red",
alpha=0.75,pch=20,size=1)+
myshapes+
myfills
g2
# FIGURE 2 -----------
df <- df_Q_bogs_streams_verify
myshapes = scale_shape_manual(values=c(21,22,24))
myfills = scale_fill_manual(values=c("grey90","yellow","blue2"))
g2 <- ggplot(df) +
geom_abline(intercept=0,slope=1)+
geom_point(aes(y=Q_m3d,x=Q_m3d_D8gwelid0,
fill=org,
shape=org),
alpha=0.75,size=2.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="white",
alpha=0.75,pch=16,size=1.5)+
geom_point(data=df %>% filter(cranberry),
aes(y=Q_m3d,x=Q_m3d_D8gwelid0),
#position=position_nudge(x=100,y=100),
color="red",
alpha=0.75,pch=20,size=1)+
myshapes+
myfills
g2 +
xlim(c(0,12000))+
ylim(c(0,12000))+
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank())
